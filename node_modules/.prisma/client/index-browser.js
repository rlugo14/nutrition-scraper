
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.10.0
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.10.0",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ResourceScalarFieldEnum = makeEnum({
  id: 'id',
  displayName: 'displayName',
  slug: 'slug'
});

exports.Prisma.LabelScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.FatScalarFieldEnum = makeEnum({
  id: 'id',
  totalFatId: 'totalFatId',
  saturatedFatId: 'saturatedFatId',
  monosaturatedFatId: 'monosaturatedFatId',
  polyunsaturatedFatId: 'polyunsaturatedFatId',
  transFatId: 'transFatId'
});

exports.Prisma.TotalFatScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.SaturatedFatScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.MonosaturatedFatScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.PolyunsaturatedFatScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.TransFatScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.CarbohydrateScalarFieldEnum = makeEnum({
  id: 'id',
  totalCarbohydrateId: 'totalCarbohydrateId',
  sugarCarbohydrateId: 'sugarCarbohydrateId'
});

exports.Prisma.TotalCarbohydrateScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.SugarCarbohydrateScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.VitaminScalarFieldEnum = makeEnum({
  id: 'id',
  vitaminCId: 'vitaminCId',
  vitaminAId: 'vitaminAId',
  vitaminDId: 'vitaminDId',
  vitaminEId: 'vitaminEId',
  vitaminB1Id: 'vitaminB1Id',
  vitaminB2Id: 'vitaminB2Id',
  vitaminB6Id: 'vitaminB6Id',
  vitaminB12Id: 'vitaminB12Id'
});

exports.Prisma.VitaminCScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.VitaminAScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.VitaminDScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.VitaminEScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.VitaminB1ScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.VitaminB2ScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.VitaminB6ScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.VitaminB12ScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.SaltScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.ZincScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.IronScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.MagnesiumScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.ChlorideScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.ManganeseScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.SulfurScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.PotassiumScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.FluorideScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.PhosphorousScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.CopperScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.IodineScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.CalciumScalarFieldEnum = makeEnum({
  id: 'id',
  measurementId: 'measurementId'
});

exports.Prisma.MineralScalarFieldEnum = makeEnum({
  id: 'id',
  saltId: 'saltId',
  ironId: 'ironId',
  zincId: 'zincId',
  magnesiumId: 'magnesiumId',
  chlorideId: 'chlorideId',
  manganeseId: 'manganeseId',
  sulfurId: 'sulfurId',
  potassiumId: 'potassiumId',
  fluorideId: 'fluorideId',
  phosphorousId: 'phosphorousId',
  copperId: 'copperId',
  iodineId: 'iodineId',
  calciumId: 'calciumId'
});

exports.Prisma.UnitScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  abbreviation: 'abbreviation'
});

exports.Prisma.MeasurementScalarFieldEnum = makeEnum({
  id: 'id',
  value: 'value',
  unitId: 'unitId',
  proteinId: 'proteinId',
  cholesterolId: 'cholesterolId',
  fiberId: 'fiberId',
  waterId: 'waterId'
});

exports.Prisma.ServingScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  measurementId: 'measurementId'
});

exports.Prisma.EnergyScalarFieldEnum = makeEnum({
  id: 'id',
  nutritionFactId: 'nutritionFactId'
});

exports.Prisma.ProteinScalarFieldEnum = makeEnum({
  id: 'id'
});

exports.Prisma.CholesterolScalarFieldEnum = makeEnum({
  id: 'id'
});

exports.Prisma.FiberScalarFieldEnum = makeEnum({
  id: 'id'
});

exports.Prisma.WaterScalarFieldEnum = makeEnum({
  id: 'id'
});

exports.Prisma.NutritionFactScalarFieldEnum = makeEnum({
  id: 'id',
  proteinId: 'proteinId',
  fatId: 'fatId',
  carbohydrateId: 'carbohydrateId',
  fiberId: 'fiberId',
  vitaminId: 'vitaminId',
  mineralId: 'mineralId',
  cholesterolId: 'cholesterolId',
  waterId: 'waterId',
  productId: 'productId'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  ean: 'ean',
  manufacturer: 'manufacturer',
  group: 'group',
  servingId: 'servingId',
  nutritionFactId: 'nutritionFactId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Resource: 'Resource',
  Label: 'Label',
  Fat: 'Fat',
  TotalFat: 'TotalFat',
  SaturatedFat: 'SaturatedFat',
  MonosaturatedFat: 'MonosaturatedFat',
  PolyunsaturatedFat: 'PolyunsaturatedFat',
  TransFat: 'TransFat',
  Carbohydrate: 'Carbohydrate',
  TotalCarbohydrate: 'TotalCarbohydrate',
  SugarCarbohydrate: 'SugarCarbohydrate',
  Vitamin: 'Vitamin',
  VitaminC: 'VitaminC',
  VitaminA: 'VitaminA',
  VitaminD: 'VitaminD',
  VitaminE: 'VitaminE',
  VitaminB1: 'VitaminB1',
  VitaminB2: 'VitaminB2',
  VitaminB6: 'VitaminB6',
  VitaminB12: 'VitaminB12',
  Salt: 'Salt',
  Zinc: 'Zinc',
  Iron: 'Iron',
  Magnesium: 'Magnesium',
  Chloride: 'Chloride',
  Manganese: 'Manganese',
  Sulfur: 'Sulfur',
  Potassium: 'Potassium',
  Fluoride: 'Fluoride',
  Phosphorous: 'Phosphorous',
  Copper: 'Copper',
  Iodine: 'Iodine',
  Calcium: 'Calcium',
  Mineral: 'Mineral',
  Unit: 'Unit',
  Measurement: 'Measurement',
  Serving: 'Serving',
  Energy: 'Energy',
  Protein: 'Protein',
  Cholesterol: 'Cholesterol',
  Fiber: 'Fiber',
  Water: 'Water',
  NutritionFact: 'NutritionFact',
  Product: 'Product'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
